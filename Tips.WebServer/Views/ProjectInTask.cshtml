@{
  Layout = "Master.cshtml";
}

@section css{
<link href="/css/navbar-fixed-top.css" rel="stylesheet">
<style type="text/css">
<!--
.panel-footer {padding: 1px 15px}
.panel-footer blockquote{margin: 0px; padding: 0px;}
.list-group-item-div {
    position:relative;
    display:inline-block;
    float:right;
    margin:0pt;
    padding:0pt;
    margin-left: 12pt;
}
.btn-on-task-record {
    border:0pt;
    margin:0pt;
    padding:0pt;
    width:1.5em;
}
.input-area {
    height: 2em;
    width: 6em;
}
-->
</style>
}



<!--header-->
@Html.Partial("Views/MenuBar", Model)

<div class="container">

    <h1 class="page-header">@Model.Task.Name</h1>

    <div class="row">
      <div class="col-md-2" >
        <h4>Progress(@Model.ProgressValue/@Model.Task.Value pt)</h4>
      </div>
      <div class="col-md-10" >
        <div class="progress">
          <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: @Model.Progress%;">
            @Model.Progress%
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-md-2" >
        <h4>Assign</h4>
      </div>
      <div class="col-md-1" >
        @if(Model.Task.Assign != null){
          <img src="@Model.Task.Assign.IconFile" class="img-rounded img-responsive" width="24" />
        }
      </div>
      <div class="col-md-2" >
        @if(Model.Task.Assign != null){
          @Model.Task.Assign.Name
        }
      </div>
      <div class="col-md-3" ></div>
      <div class="col-md-4" >
        <div class="form-inline">
          <div class="form-group">
            <input type="text" class="form-control" id="userId"  placeholder="UserId">
          </div>
          <button id="assign" class="btn btn-primary">Assign</button>
          <button id="assignme" class="btn btn-primary" >Mine</button>
        </div>
      </div>
    </div>


    <div class="row">
      <div class="col-md-8">
        <h2>Comments</h2>
        @foreach(var comment in Model.Task.Comments){

          <div class="panel panel-default" >
            <div class="panel-body comment">
              @comment.Text
            </div>
            <div class="panel-footer">
              <blockquote class="blockquote-reverse">
                @comment.Who.Name @comment.Day.Month/@comment.Day.Day @comment.Day.Hour:@comment.Day.Minute
              </blockquote>
            </div>
          </div>
        }

        <div class="row">
          <textArea id="commentText" class="col-md-12" Rows="8"></textarea>
        </div>
        <div class="row">
          <button id="addComment" class="btn btn-default pull-right" >Add Comment</button>
        </div>
      </div>

      <div class="col-md-4">
        <h2>Works</h2>
        <ul class="list-group">
        @foreach(var record in Model.Task.Records){
          <li class="list-group-item">
            <div class="list-group-item-div">
              <button id="editCommand" type="button" class="btn btn-default btn-lg btn-delete btn-edit-task-record btn-on-task-record" value="@record.Id">
                <span class="glyphicon glyphicon-pencil"></span>
              </button>
              <button id="deleteCommand" type="button" class="btn btn-default btn-lg btn-delete btn-delete-task-record btn-on-task-record" value="@record.Id">
                <span class="glyphicon glyphicon-remove-sign"></span>
              </button>
            </div>
            <span class="badge" value="@record.Id">@record.Value</span>
            <span class="task-info" value="@record.Id"><span id="workDate">@record.Day.Year/@record.Day.Month/@record.Day.Day</span> <span id="workerName">@record.Who.Name</span> <span id="workCost">@record.WorkValue</span></span>
          </li>
        }

        </ul>
        <div class="col-md-12">
          <div class="form-group">
              <label >WorkValue:</label>
              <input type="text" class="form-control" id="workvalue" placeholder="1.0" />
          </div>
          <div class="form-group">
              <label >Progress:</label>
              <div class="input-group">
                <input type="text" class="form-control" id="progress" placeholder="50.0" value="@Model.Progress" />
                <div class="input-group-addon">%</div>
              </div>
          </div>
        </div>
        <button id="addrecord" class="btn btn-default pull-right" >Add Record</button>
      </div>
    </div>
</div>


@section js{
<script type="text/javascript">
  $(function () {

    // 検索関数を返す関数
    var substringMatcher = function(strs) {
      return function findMatches(q, cb) {
        var matches, substringRegex;

        // an array that will be populated with substring matches
        matches = [];

        // regex used to determine if a string contains the substring `q`
        substrRegex = new RegExp(q, 'i');

        // iterate through the pool of strings and for any string that
        // contains the substring `q`, add it to the `matches` array
        $.each(strs, function(i, str) {
          if (substrRegex.test(str)) {
            matches.push(str);
          }
        });

        cb(matches);
      };
    };

    function setupAutoComplete(){
      var jsonData = {
      };
      getJson('@Url.Content("~/api/project/" + Model.Project.Id + "/members")', jsonData, function(data){

        var data =
          $(data).map(function(){
                  return this.id;
              });


        $('#userId').typeahead({
          hint: true,
          highlight: true,
          minLength: 1
        },
        {
          name: 'userId',
          source: substringMatcher(data)
        });
      });
    }

    $( document ).ready( function() {
      clearTypeahead();
      setupAutoComplete();

    });



    $('.comment').each(function(){
      var text = $(this).html();
      text = $.trim(text);
      text = text.replace(/\r\n/g, "<br />");
      text = text.replace(/(\n|\r)/g, "<br />");
      $(this).html(text);
    });

    function assignTask(userId){
      var jsonData = {
        userid:userId
      };
      var url = '@Url.Content(string.Format("~/task/{0}/assign",@Model.Task.Id))';
      postJson(url, jsonData, function(){
        location.reload();
      });

    }

    $('#assign').click(function(e){
      assignTask($('#userId').val());
    });

    $('#assignme').click(function(e){

      assignTask('@Model.Auth.Id');
    });

    $('#addrecord').click(function(e){

      var dt = new Date();
      var now = dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
      var workvalue = Number($('#workvalue').val());
      var totalvalue = Number(@Model.Task.Value);
      var value = workvalue;

      if (totalvalue != 0) {
        var progress = Number($('#progress').val());
        var currentProgress = Number(@Model.Progress);
        var diff = (progress - currentProgress) * 0.01;
        value = diff * totalvalue;
        if (totalvalue < @Model.ProgressValue + value) {
          value = totalvalue - @Model.ProgressValue;
        }
      }

      if (workvalue == 0 && value == 0) {
        return;
      }

      var jsonData = {
        taskId:@Model.Task.Id,
        record : {
          day: now,
          value: value,
          workvalue: workvalue,
          who:{
            id:'@Model.Auth.Id',
            name:'@Model.Auth.Name'
          }
        },
      };

      var url = '@Url.Content("~/api/task/record/")';
      postJson(url, jsonData, function(){
        location.reload();
      });

    });

    $('#addComment').click(function(e){

      var dt = new Date();
      var now = dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
      var comment = $.trim($('#commentText').val());
      if (comment == '') {
        return;
      }

      var jsonData = {
        taskId:@Model.Task.Id,
        comment : {
          day: now,
          text: $('#commentText').val(),
          who:{
            id:'@Model.Auth.Id',
            name:'@Model.Auth.Name'
          }
        },
      };

      var url = '@Url.Content("~/api/task/comment/")';
      postJson(url, jsonData, function(){
        location.reload();
      });

    });

    $(function () {
        $('.btn-delete-task-record').click(function (e) { confirmDeleteTaskRecord($(this)); });
    });

    function confirmDeleteTaskRecord(button) {
      if (window.confirm("Are you sure you want to delete this task record ?")) {
        deleteTaskRecord(@Model.Task.Id, button.val(), '@Url.Content("~/api/task/record/")', function () {
          location.reload();
          window.confirm('Task record has been successfully deleted.');
        })
      }
    }

    function deleteTaskRecord(taskid, recordid, url, callback) {

      var jsonData = {
        TaskId: taskid,
        RecordId: recordid
      };
      var json = JSON.stringify(jsonData);
      deleteJson(url, jsonData, callback);
    }
  });


    $('.btn-edit-task-record').click(function (e) {
        // 前処理～

        // 編集用のコンポーネントを削除
        removeEditTaskComponents();

        // 全てのtaskInfoを表示する
        showAllTaskInfo();

        var val = $(this).val();
        var taskInfo = $(".task-info[value=" + val + "]");
        var editCommand = $(".btn-edit-task-record[value=" + val + "]");
        var deleteCommand = $(".btn-delete-task-record[value=" + val + "]");
        // 対象のtaskInfoを隠す
        taskInfo.hide();
        // 対象の編集ボタンを隠す
        editCommand.hide();
        // 対象の削除ボタンを隠す
        deleteCommand.hide();

        // 編集用コントロール作成 ～

        // 日付取得
        var date = taskInfo.children('#workDate').text();
        // user名取得
        var userName = taskInfo.children('#workerName').text();
        // コスト取得
        var cost = taskInfo.children('#workCost').text();
            
        // 対象のtaskInfoの下にinput-task-infoを作成する
        taskInfo.after(' \
                <span class="input-task-info" value="' + val + '"> \
                    <textarea class="input-date input-area">' + date + '</textarea> \
                    <span>' + userName + '</span> \
                    <textarea class="input-cost input-area">' + cost + '</textarea> \
                </span> \
            ');
        // 押下された編集ボタンの代わりに適用ボタンを作成する
        editCommand.after(' \
                <button id="editOK" type="button" class="btn btn-default btn-lg btn-delete btn-edit-ok-task-record btn-on-task-record" value="' + val + '"> \
                <span class="glyphicon glyphicon-ok"></span> \
              </button> \
            ');

        // 削除ボタンの代わりにキャンセルボタンを作成する
        deleteCommand.after(' \
                <button id="editCancel" type="button" class="btn btn-default btn-lg btn-delete btn-edit-cancel-task-record btn-on-task-record" value="' + val + '"> \
                <span class="glyphicon glyphicon-remove"></span> \
              </button> \
            ');

        // 適用ボタンのイベントハンドリング
        $("#editOK[value=" + val + "]").click(function (e) { 
            var updatedDate = $(".input-task-info[value=" + val + "] .input-date").val();
            var updatedCost = $(".input-task-info[value=" + val + "] .input-cost").val();
            var cpi = Number($('.badge[value=' + val + ']').text())
            // 編集内容で更新
            updateTaskRecord(@Model.Task.Id, val, updatedDate, updatedCost, cpi, '@Url.Content("~/api/task/record/")', function () {
                // 成功したら画面更新
                location.reload();
            })
        });

        // キャンセルボタンのイベントハンドリング
        $("#editCancel[value=" + val + "]").click(function (e) { 
            // 編集用のコンポーネントを削除
            removeEditTaskComponents(); 
            // 全てのtaskInfoを表示する
            showAllTaskInfo();
        }); 

    });

    function updateTaskRecord(taskid, recordid, date, cost, cpi, url, callback) {
        if (cost == 0) {
            return;
        }

        var jsonData = {
            taskId:taskid,
            record : {
                id: recordid,
                day: date,
                value: cpi,
                workvalue: cost,
                who:{
                    id:'@Model.Auth.Id',
                    name:'@Model.Auth.Name'
                }
            },
        };

        postJson(url, jsonData, function(){
            location.reload();
        });
    }

    function removeEditTaskComponents()
    {
        // 全てのinput-task-infoを削除する
        $('.input-task-info').remove();

        // 全てのbtn-edit-ok-task-recordを削除する
        $('.btn-edit-ok-task-record').remove();

        // 全てのbtn-edit-cancel-task-recordを削除する
        $('.btn-edit-cancel-task-record').remove();
    }

    function showAllTaskInfo()
    {
        // 全てのtaskInfoを表示する
        $('.task-info').show();

        // 全ての編集ボタンを表示する
        $('.btn-edit-task-record').show();

        // 全ての削除ボタンを表示する
        $('.btn-delete-task-record').show();
    }
</script>
}
